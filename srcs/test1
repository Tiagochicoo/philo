/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   test1.c                                            :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: tpereira <tpereira@42Lisboa.com>           +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2022/07/02 13:24:17 by tpereira          #+#    #+#             */
/*   Updated: 2022/07/02 16:17:49 by tpereira         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include<stdio.h>
#include<stdlib.h>
#include<pthread.h>
#include<semaphore.h>
#include<unistd.h>

sem_t	init_stuff(char **argv)
{
	sem_t forks[atoi(argv[1])];
	return (&forks);
}
int main(int argc, char **argv)
{
	clock_t 	start;
	clock_t 	end;
	double  	cpu_time_used;
	int			i;
	int			n[atoi(argv[1])];
	pthread_t 	T[atoi(argv[1])];
	sem_t		*forks;

	forks = init_stuff(argv);
	start = clock();
	for(i = 0; i < atoi(argv[1]); i++)
		sem_open(&forks[i], 0, 1);
	for(i = 0; i < atoi(argv[1]); i++)
	{
		n[i] = i;
		pthread_create(&T[i], NULL, philos, (void *)&n[i]);
	}
	for(i = 0; i < atoi(argv[1]); i++)
		pthread_join(T[i], NULL);
	end = clock();
	cpu_time_used = ((double) (end - start)) / CLOCKS_PER_SEC;
	printf("time taken: %fms", cpu_time_used * 1000);
}
void * philos(void * n)
{
	sem_t	*forks;

	forks = init_stuff(argv);
	int ph=*(int *)n;
	sem_wait(&forks[ph]);
	printf("Philosopher %d has taken a fork\n",ph);
	sem_wait(&forks[(ph + 1) % 5]);
	printf("Philosopher %d has taken a fork\n",ph);
	eat(ph);
	usleep(3000);
	printf("Philosopher %d is sleeping\n",ph);
	sem_post(&forks[(ph + 1) % 5]);
	sem_post(&forks[ph]);
}
void eat(int ph)
{
	printf("Philosopher %d is eating\n",ph);
}